from lxml import etree

'''
1. 用XPath 中的 text 方法可以获取节点中的文本，接下来尝试获取前面 li 节点中的文本
'''
print('test 111111111111')
html = etree.parse('./test.html', etree.HTMLParser())
result = html.xpath('//li[@class="item-0"]/text()')
print(result)
'''
打印结果为：
['\r\n     ']
'''
'''
奇怪的是，我们并没有获取到任何文本，只获取到了一个换行符，这是为什么呢？
因为 XPath 中 text 方法前面是 /，而此处 / 的含义是选取直接子节点，很明显 li 的直接子节点都是 a 节点，文本都是在 a 节点内部的，
所以这里匹配到的结果就是被修正的 li 节点内部的换行符，因为自动修正的 li 节点的尾标签换行了。

即选中的是这两个节点：
<li class="item-0"><a href="link1.html">first item</a></li>
<li class="item-0"><a href="link5.html">fifth item</a>
</li>
其中一个节点因为自动修正，li 节点的尾标签添加的时候换行了，所以提取文本得到的唯一结果就是 li 节点的尾标签和 a 节点的尾标签之间的换行符。
因此，如果想获取 li 节点内部的文本，就有两种方式，一种是先选取 a 节点再获取文本，另一种就是使用 //。
'''

'''
2. 选取到 a 节点再获取文本
'''
print('\n\ntest 22222222222222')
result = html.xpath('//li[@class="item-0"]/a/text()')
print(result)
'''
打印结果为：
['first item', 'fifth item']
'''
'''
可以看到，这里的返回值是两个，内容都是属性为 item-0 的 li 节点的文本，这也印证了前面属性匹配的结果是正确的。
这里我们是逐层选取的，先选取了 li 节点，又利用 / 选取了其直接子节点 a，然后再选取其文本，得到的结果恰好是符合我们预期的两个结果。
'''

'''
3. 用另一种方式（即使用 //）选取的结果
'''
print('\n\ntest 333333333333')
result = html.xpath('//li[@class="item-0"]//text()')
print(result)
'''
打印结果为：
['first item', 'fifth item', '\r\n    ']
'''
'''
返回结果是 3 个。可想而知，这里是选取所有子孙节点的文本，其中前两个就是 li 的子节点 a 节点内部的文本，另外一个就是最后一个 li 节点内部的文本，
即换行符。所以说，如果要想获取子孙节点内部的所有文本，可以直接用 // 加 text 方法的方式，这样可以保证获取到最全面的文本信息，但是可能会夹杂
一些换行符等特殊字符。如果想获取某些特定子孙节点下的所有文本，可以先选取到特定的子孙节点，然后再调用 text 方法方法获取其内部文本，这样可以
保证获取的结果是整洁的。
'''
